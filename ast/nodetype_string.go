// Code generated by "stringer -type=NodeType"; DO NOT EDIT.

package ast

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NodeDocument-0]
	_ = x[NodeParagraph-1]
	_ = x[NodeHeading-2]
	_ = x[NodeHeadingC8hMarker-3]
	_ = x[NodeThematicBreak-4]
	_ = x[NodeBlockquote-5]
	_ = x[NodeBlockquoteMarker-6]
	_ = x[NodeList-7]
	_ = x[NodeListItem-8]
	_ = x[NodeHTMLBlock-9]
	_ = x[NodeInlineHTML-10]
	_ = x[NodeCodeBlock-11]
	_ = x[NodeCodeBlockFenceOpenMarker-12]
	_ = x[NodeCodeBlockFenceCloseMarker-13]
	_ = x[NodeCodeBlockFenceInfoMarker-14]
	_ = x[NodeCodeBlockCode-15]
	_ = x[NodeText-16]
	_ = x[NodeEmphasis-17]
	_ = x[NodeEmA6kOpenMarker-18]
	_ = x[NodeEmA6kCloseMarker-19]
	_ = x[NodeEmU8eOpenMarker-20]
	_ = x[NodeEmU8eCloseMarker-21]
	_ = x[NodeStrong-22]
	_ = x[NodeStrongA6kOpenMarker-23]
	_ = x[NodeStrongA6kCloseMarker-24]
	_ = x[NodeStrongU8eOpenMarker-25]
	_ = x[NodeStrongU8eCloseMarker-26]
	_ = x[NodeCodeSpan-27]
	_ = x[NodeCodeSpanOpenMarker-28]
	_ = x[NodeCodeSpanContent-29]
	_ = x[NodeCodeSpanCloseMarker-30]
	_ = x[NodeHardBreak-31]
	_ = x[NodeSoftBreak-32]
	_ = x[NodeLink-33]
	_ = x[NodeImage-34]
	_ = x[NodeBang-35]
	_ = x[NodeOpenBracket-36]
	_ = x[NodeCloseBracket-37]
	_ = x[NodeOpenParen-38]
	_ = x[NodeCloseParen-39]
	_ = x[NodeLinkText-40]
	_ = x[NodeLinkDest-41]
	_ = x[NodeLinkTitle-42]
	_ = x[NodeLinkSpace-43]
	_ = x[NodeHTMLEntity-44]
	_ = x[NodeTaskListItemMarker-100]
	_ = x[NodeStrikethrough-101]
	_ = x[NodeStrikethrough1OpenMarker-102]
	_ = x[NodeStrikethrough1CloseMarker-103]
	_ = x[NodeStrikethrough2OpenMarker-104]
	_ = x[NodeStrikethrough2CloseMarker-105]
	_ = x[NodeTable-106]
	_ = x[NodeTableHead-107]
	_ = x[NodeTableRow-108]
	_ = x[NodeTableCell-109]
	_ = x[NodeEmoji-200]
	_ = x[NodeEmojiUnicode-201]
	_ = x[NodeEmojiImg-202]
	_ = x[NodeEmojiAlias-203]
	_ = x[NodeMathBlock-300]
	_ = x[NodeMathBlockOpenMarker-301]
	_ = x[NodeMathBlockContent-302]
	_ = x[NodeMathBlockCloseMarker-303]
	_ = x[NodeInlineMath-304]
	_ = x[NodeInlineMathOpenMarker-305]
	_ = x[NodeInlineMathContent-306]
	_ = x[NodeInlineMathCloseMarker-307]
	_ = x[NodeBackslash-400]
	_ = x[NodeBackslashContent-401]
	_ = x[NodeVditorCaret-405]
	_ = x[NodeFootnotesDef-410]
	_ = x[NodeFootnotesRef-411]
	_ = x[NodeToC-415]
	_ = x[NodeHeadingID-420]
	_ = x[NodeYamlFrontMatter-425]
	_ = x[NodeYamlFrontMatterOpenMarker-426]
	_ = x[NodeYamlFrontMatterContent-427]
	_ = x[NodeYamlFrontMatterCloseMarker-428]
	_ = x[NodeBlockRef-430]
	_ = x[NodeBlockRefID-431]
	_ = x[NodeBlockRefSpace-432]
	_ = x[NodeBlockRefText-433]
	_ = x[NodeTypeMaxVal-1024]
}

const _NodeType_name = "NodeDocumentNodeParagraphNodeHeadingNodeHeadingC8hMarkerNodeThematicBreakNodeBlockquoteNodeBlockquoteMarkerNodeListNodeListItemNodeHTMLBlockNodeInlineHTMLNodeCodeBlockNodeCodeBlockFenceOpenMarkerNodeCodeBlockFenceCloseMarkerNodeCodeBlockFenceInfoMarkerNodeCodeBlockCodeNodeTextNodeEmphasisNodeEmA6kOpenMarkerNodeEmA6kCloseMarkerNodeEmU8eOpenMarkerNodeEmU8eCloseMarkerNodeStrongNodeStrongA6kOpenMarkerNodeStrongA6kCloseMarkerNodeStrongU8eOpenMarkerNodeStrongU8eCloseMarkerNodeCodeSpanNodeCodeSpanOpenMarkerNodeCodeSpanContentNodeCodeSpanCloseMarkerNodeHardBreakNodeSoftBreakNodeLinkNodeImageNodeBangNodeOpenBracketNodeCloseBracketNodeOpenParenNodeCloseParenNodeLinkTextNodeLinkDestNodeLinkTitleNodeLinkSpaceNodeHTMLEntityNodeTaskListItemMarkerNodeStrikethroughNodeStrikethrough1OpenMarkerNodeStrikethrough1CloseMarkerNodeStrikethrough2OpenMarkerNodeStrikethrough2CloseMarkerNodeTableNodeTableHeadNodeTableRowNodeTableCellNodeEmojiNodeEmojiUnicodeNodeEmojiImgNodeEmojiAliasNodeMathBlockNodeMathBlockOpenMarkerNodeMathBlockContentNodeMathBlockCloseMarkerNodeInlineMathNodeInlineMathOpenMarkerNodeInlineMathContentNodeInlineMathCloseMarkerNodeBackslashNodeBackslashContentNodeVditorCaretNodeFootnotesDefNodeFootnotesRefNodeToCNodeHeadingIDNodeYamlFrontMatterNodeYamlFrontMatterOpenMarkerNodeYamlFrontMatterContentNodeYamlFrontMatterCloseMarkerNodeBlockRefNodeBlockRefIDNodeBlockRefSpaceNodeBlockRefTextNodeTypeMaxVal"

var _NodeType_map = map[NodeType]string{
	0:    _NodeType_name[0:12],
	1:    _NodeType_name[12:25],
	2:    _NodeType_name[25:36],
	3:    _NodeType_name[36:56],
	4:    _NodeType_name[56:73],
	5:    _NodeType_name[73:87],
	6:    _NodeType_name[87:107],
	7:    _NodeType_name[107:115],
	8:    _NodeType_name[115:127],
	9:    _NodeType_name[127:140],
	10:   _NodeType_name[140:154],
	11:   _NodeType_name[154:167],
	12:   _NodeType_name[167:195],
	13:   _NodeType_name[195:224],
	14:   _NodeType_name[224:252],
	15:   _NodeType_name[252:269],
	16:   _NodeType_name[269:277],
	17:   _NodeType_name[277:289],
	18:   _NodeType_name[289:308],
	19:   _NodeType_name[308:328],
	20:   _NodeType_name[328:347],
	21:   _NodeType_name[347:367],
	22:   _NodeType_name[367:377],
	23:   _NodeType_name[377:400],
	24:   _NodeType_name[400:424],
	25:   _NodeType_name[424:447],
	26:   _NodeType_name[447:471],
	27:   _NodeType_name[471:483],
	28:   _NodeType_name[483:505],
	29:   _NodeType_name[505:524],
	30:   _NodeType_name[524:547],
	31:   _NodeType_name[547:560],
	32:   _NodeType_name[560:573],
	33:   _NodeType_name[573:581],
	34:   _NodeType_name[581:590],
	35:   _NodeType_name[590:598],
	36:   _NodeType_name[598:613],
	37:   _NodeType_name[613:629],
	38:   _NodeType_name[629:642],
	39:   _NodeType_name[642:656],
	40:   _NodeType_name[656:668],
	41:   _NodeType_name[668:680],
	42:   _NodeType_name[680:693],
	43:   _NodeType_name[693:706],
	44:   _NodeType_name[706:720],
	100:  _NodeType_name[720:742],
	101:  _NodeType_name[742:759],
	102:  _NodeType_name[759:787],
	103:  _NodeType_name[787:816],
	104:  _NodeType_name[816:844],
	105:  _NodeType_name[844:873],
	106:  _NodeType_name[873:882],
	107:  _NodeType_name[882:895],
	108:  _NodeType_name[895:907],
	109:  _NodeType_name[907:920],
	200:  _NodeType_name[920:929],
	201:  _NodeType_name[929:945],
	202:  _NodeType_name[945:957],
	203:  _NodeType_name[957:971],
	300:  _NodeType_name[971:984],
	301:  _NodeType_name[984:1007],
	302:  _NodeType_name[1007:1027],
	303:  _NodeType_name[1027:1051],
	304:  _NodeType_name[1051:1065],
	305:  _NodeType_name[1065:1089],
	306:  _NodeType_name[1089:1110],
	307:  _NodeType_name[1110:1135],
	400:  _NodeType_name[1135:1148],
	401:  _NodeType_name[1148:1168],
	405:  _NodeType_name[1168:1183],
	410:  _NodeType_name[1183:1199],
	411:  _NodeType_name[1199:1215],
	415:  _NodeType_name[1215:1222],
	420:  _NodeType_name[1222:1235],
	425:  _NodeType_name[1235:1254],
	426:  _NodeType_name[1254:1283],
	427:  _NodeType_name[1283:1309],
	428:  _NodeType_name[1309:1339],
	430:  _NodeType_name[1339:1351],
	431:  _NodeType_name[1351:1365],
	432:  _NodeType_name[1365:1382],
	433:  _NodeType_name[1382:1398],
	1024: _NodeType_name[1398:1412],
}

func (i NodeType) String() string {
	if str, ok := _NodeType_map[i]; ok {
		return str
	}
	return "NodeType(" + strconv.FormatInt(int64(i), 10) + ")"
}
